classdef config_mwm < base_config
    % config_mwm Global constants
    properties(Constant)        
        
        % number of animals to discard from each group
        REGULARIZE_GROUPS = 1;
        NDISCARD = 0;
        DISCARD_FEATURE = base_config.FEATURE_AVERAGE_SPEED;
    
        % relation between animal ids and groups 
        % (1 = control, 2 = stress, 3 = control + modified diet, 4 = stress
        % + modified diet)               
        FEATURE_LONGEST_LOOP = trajectory_feature('L_max', 'Longest loop', 'trajectory_longest_loop', 1, ...
            {'LONGEST_LOOP_EXTENSION'});
        FEATURE_CENTRE_DISPLACEMENT = trajectory_feature('D_ctr', 'Centre displacement', 'trajectory_centre_displacement', 1, ...
            {'CENTRE_X', 'CENTRE_Y', 'ARENA_R'}); 
        FEATURE_PLATFORM_PROXIMITY = trajectory_feature('P_plat', 'Platform proximity', 'trajectory_time_within_radius', 1, ...
            {'PLATFORM_PROXIMITY_RADIUS', 'PLATFORM_X', 'config_mwm.PLATFORM_Y'});
        FEATURE_CV_INNER_RADIUS = trajectory_feature('Ri_CV', 'Inner radius variation', 'trajectory_cv_inner_radius', 1, ...
            {'CENTRE_X', 'CENTRE_Y'});
        
        ADDITIONAL_FEATURES = [ ...
            config_mwm.FEATURE_LONGEST_LOOP, ...
            config_mwm.FEATURE_CENTRE_DISPLACEMENT, ...
            config_mwm.FEATURE_PLATFORM_PROXIMITY, ...
            config_mwm.FEATURE_CV_INNER_RADIUS ...
        ];
                        
        DEFAULT_FEATURE_SET = [ ...
            config_mwm.FEATURE_MEDIAN_RADIUS, ...
            config_mwm.FEATURE_IQR_RADIUS, ...
            config_mwm.FEATURE_FOCUS, ...
            config_mwm.FEATURE_CENTRE_DISPLACEMENT, ... 
            config_mwm.FEATURE_CV_INNER_RADIUS, ...
            config_mwm.FEATURE_PLATFORM_PROXIMITY, ...
            config_mwm.FEATURE_BOUNDARY_ECCENTRICITY, ...
            config_mwm.FEATURE_LONGEST_LOOP ...
        ];
    
        ADDITIONAL_TAGS = [ ...
            tag('TT', 'thigmotaxis', base_config.TAG_TYPE_BEHAVIOUR_CLASS, 1), ...
            tag('IC', 'incursion', base_config.TAG_TYPE_BEHAVIOUR_CLASS, 2), ...
            tag('SS', 'scanning-surroundings', base_config.TAG_TYPE_BEHAVIOUR_CLASS, 7), ...                 
            tag('SC', 'scanning', base_config.TAG_TYPE_BEHAVIOUR_CLASS, 3), ...
            tag('FS', 'focused search', base_config.TAG_TYPE_BEHAVIOUR_CLASS, 4), ...                                  
            tag('SO', 'self orienting', base_config.TAG_TYPE_BEHAVIOUR_CLASS, 6), ...
            tag('CR', 'chaining response', base_config.TAG_TYPE_BEHAVIOUR_CLASS, 5), ...
            tag('ST', 'target scanning', base_config.TAG_TYPE_BEHAVIOUR_CLASS, 8), ...
            tag('DF', 'direct finding', base_config.TAG_TYPE_BEHAVIOUR_CLASS), ...
            tag('AT', 'approaching_target', base_config.TAG_TYPE_BEHAVIOUR_CLASS) ...
        ];
                                               
        CLASSES_COLORMAP = @jet;
        
        SEGMENTATION_CONSTANT_LENGHT = function_wrapper('Constant length', 'trajectory_segmentation_constant_len', 1, ...
            {'SEGMENT_LENGTH', 'SEGMENT_OVERLAP'});
    end
    
    methods    
        function inst = config_mwm(name, varargin)
            prop = process_options(varargin, 'Properties', {});          
           
            prop = property_list_set_default(prop, 'CLUSTER_CLASS_MINIMUM_SAMPLES_P', 0.01); 
            prop = property_list_set_default(prop, 'CLUSTER_CLASS_MINIMUM_SAMPLES_EXP', 0.75);        
            
            % replace the properties with our new list            
            other_arg = property_list_replace(varargin, 'Properties', prop);
            
            inst@base_config(name, ...                
               'Features', config_mwm.ADDITIONAL_FEATURES, ...                 
               'FeatureSet', config_mwm.DEFAULT_FEATURE_SET, ...
               'ClusteringFeatureSet', config_mwm.DEFAULT_FEATURE_SET, ...               
               'TrialTypesDescription', {'Training'}, ...
               other_arg{:} ...           
            );  
                    
            % used to calibrate the trajectories
            inst.TRAJECTORY_SNAPSHOTS_DIRS = {...
                fullfile(cur_dir, '../../data/mwm_peripubertal_stress/screenshots/set1/'), ...
                fullfile(cur_dir, '../../data/mwm_peripubertal_stress/screenshots/set2/'), ...
                fullfile(cur_dir, '../../data/mwm_peripubertal_stress/screenshots/set3/') ...
            };            
        end
                
        % Imports trajectories from Noldus data file's
        function traj = load_data(inst, path)
            addpath(fullfile(fileparts(mfilename('fullpath')), '/noldus'));
            traj = load_trajectories(1:3, 1, 'DeltaX', -100, 'DeltaY', -100);
        end        
    end
end

