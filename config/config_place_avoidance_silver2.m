classdef config_place_avoidance_silver2 < config_place_avoidance
    % config_mwm Global constants
    properties(Constant)        
        COMMON_SETTINGS = { ...
            'Sessions', 6, ...  
            'TrialsPerSession', ones(1, 6), ...
            'TrialType', [ config_place_avoidance.TRIAL_TYPE_APAT_TRAINING ...
                           config_place_avoidance.TRIAL_TYPE_APAT_TRAINING, ...
                           config_place_avoidance.TRIAL_TYPE_APAT_TRAINING, ...
                           config_place_avoidance.TRIAL_TYPE_APAT_TRAINING, ...
                           config_place_avoidance.TRIAL_TYPE_APAT_TRAINING, ...
                           config_place_avoidance.TRIAL_TYPE_APAT_TEST ], ...
            'GroupsDescription', {'Control', 'Silver'} ...                                                          
        };
        COMMON_PROPERTIES = {'SHOCK_AREA_ANGLE', pi/180*225*ones(1, 6) };
                
        CLUSTERING_FEATURE_SET_APAT_AFTER_SHOCK = [  ...
             config_place_avoidance.FEATURE_ANGULAR_DISTANCE_SHOCK_SIGNED, ...                                
             config_place_avoidance.FEATURE_AVG_ANG_VELOCITY_ARENA_0, ...
             config_place_avoidance.FEATURE_MAX_ANG_VELOCITY_ARENA_0, ...       
             config_place_avoidance.FEATURE_LOG_RADIUS_0, ...
             config_place_avoidance.FEATURE_LOG_RADIUS, ...                                         
             config_place_avoidance.FEATURE_VAR_LOG_RADIUS, ...
             config_place_avoidance.FEATURE_TIME_CENTRE, ...
             config_place_avoidance.FEATURE_AVERAGE_SPEED_ARENA, ...                                                                                                                             
             config_place_avoidance.FEATURE_VARIANCE_SPEED_ARENA, ...
             config_place_avoidance.FEATURE_VAR_ANG_VELOCITY_ARENA, ...
             config_place_avoidance.FEATURE_AVG_ANG_VELOCITY_ARENA, ...
             config_place_avoidance.FEATURE_ANGULAR_DISPERSION ...
        ];  
        
        SEGMENTATION_ANGULAR_SPEED = function_wrapper('Angular speed changes', 'segmentation_speed_change', 1, ...
            [], config_place_avoidance.DATA_REPRESENTATION_ARENA_ANGULAR_SPEED_PROFILE, 10);
      
        SEGMENTATION_ANGULAR_SPEED_AFTER_SHOCK = function_wrapper('Angular speed changes after shock', 'segmentation_speed_change', 1, ...
            [], config_place_avoidance.DATA_REPRESENTATION_ARENA_ANGULAR_SPEED_PROFILE, 10, 'Selection', 'AfterShock');
        
        SEGMENTATION_ANGULAR_SPEED_OTHER = function_wrapper('Angular speed changes not after shosk', 'segmentation_speed_change', 1, ...
            [], config_place_avoidance.DATA_REPRESENTATION_ARENA_ANGULAR_SPEED_PROFILE, 10, 'Selection', 'NotAfterShock');
        
        
        %%% Main segmentation
        SEGMENTATION_PLACE_AVOIDANCE2 = trajectory_segmentation_composition( ...
            config_place_avoidance.SEGMENTATION_PLACE_AVOIDANCE, ...
            config_place_avoidance_silver2.SEGMENTATION_ANGULAR_SPEED ...
        );
    
        SEGMENTATION_PLACE_AVOIDANCE_AFTER_SHOCK = trajectory_segmentation_composition( ...
            config_place_avoidance.SEGMENTATION_PLACE_AVOIDANCE, ...
            config_place_avoidance_silver2.SEGMENTATION_ANGULAR_SPEED_AFTER_SHOCK ...
        );
    
        SEGMENTATION_PLACE_AVOIDANCE_OTHER = trajectory_segmentation_composition( ...
            config_place_avoidance.SEGMENTATION_PLACE_AVOIDANCE, ...
            config_place_avoidance_silver2.SEGMENTATION_ANGULAR_SPEED_OTHER ...
        );
    
        %%% Sub-segmentation        
        SUB_SEGMENTATION = function_wrapper('Sub-segmentation: constant time', 'trajectory_segmentation_constant_time', 1, ...
            {'SUB_SEGMENT_TIME', 'SUB_SEGMENT_TIME_OVERLAP'});
        
        CONFIGURATIONS = { ...
            { 'Full trajectories', {}, {}}, ...
            {'Segments between shocks', { ...
                'SegmentationFunction', config_place_avoidance_silver2.SEGMENTATION_PLACE_AVOIDANCE2 ...
                }, { ...
                  'SEGMENT_SECTION', config_place_avoidance.SECTION_AVOID, ... 
                  'SEGMENT_MINIMUM_SHOCKS_DELAY', 5, ...                  
                  'SEGMENT_TIME', 100, ... 
                  'SEGMENT_TIME_OVERLAP', 0 ... 
                } ...
            }, ...
            {'Segments between shocks (complete)', { ...
                'SegmentationFunction', config_place_avoidance_silver2.SEGMENTATION_PLACE_AVOIDANCE, ...
                'SubSegmentationFunction', config_place_avoidance_silver2.SUB_SEGMENTATION ...
                }, { ...
                  'SEGMENT_SECTION', config_place_avoidance.SECTION_AVOID, ... 
                  'SEGMENT_MINIMUM_SHOCKS_DELAY', 5, ...                  
                  'SUB_SEGMENT_TIME', 10, ... 
                  'SUB_SEGMENT_TIME_OVERLAP', 0, ...
                  'SUB_SEGMENTATION_MAXIMUM_SEGMENTS', 20 ...
                } ...
            }, ...
            {'Segments after shocks', { ...
                'SegmentationFunction', config_place_avoidance_silver2.SEGMENTATION_PLACE_AVOIDANCE_AFTER_SHOCK, ...
                'ClusteringFeatureSet', config_place_avoidance_silver2.CLUSTERING_FEATURE_SET_APAT_AFTER_SHOCK ...                             
                }, { ...
                  'SEGMENT_SECTION', config_place_avoidance.SECTION_AVOID, ... 
                  'SEGMENT_MINIMUM_SHOCKS_DELAY', 5, ...                  
                  'SEGMENT_TIME', 100, ... 
                  'SEGMENT_TIME_OVERLAP', 0 ... 
                } ...
            }, ...
            {'Segments (not) after shocks', { ...
                'SegmentationFunction', config_place_avoidance_silver2.SEGMENTATION_PLACE_AVOIDANCE_OTHER ...
                }, { ...
                  'SEGMENT_SECTION', config_place_avoidance.SECTION_AVOID, ... 
                  'SEGMENT_MINIMUM_SHOCKS_DELAY', 5, ...                  
                  'SEGMENT_TIME', 100, ... 
                  'SEGMENT_TIME_OVERLAP', 0 ... 
                } ...
            } ...
        };                       
    end   
        
    methods        
        function inst = config_place_avoidance_silver2(desc, num_config) 
             param = config_place_avoidance_silver2.CONFIGURATIONS{num_config};
             other_settings = param{2};
             prop = param{3};
             common = config_place_avoidance_silver2.COMMON_SETTINGS;
             common_prop = config_place_avoidance_silver2.COMMON_PROPERTIES;                                                      
             
             inst@config_place_avoidance(desc, ...
                 common{:}, other_settings{:}, ...
                 'Properties', [common_prop, prop] ...                              
             );              
        end
        
        % Imports trajectories from Noldus data file's
        function res = load_data(inst, root, varargin)            
            % "Silver" set
            % folder = '/home/tiago/place_avoidance/data3/';
            % control
            traj = inst.load_trajectories(root, 1, ...
                'FilterPattern', 'ho*Room*.dat', 'IdDayMask', 'hod%dr%d', 'ReverseDayId', 1, varargin{:}); 
            
            % silver
            traj = traj.append(inst.load_trajectories(root, 2, ...
                'FilterPattern', 'nd*Room*.dat', 'IdDayMask', 'nd%dr%d', 'ReverseDayId', 1, varargin{:}));           
            
            inst.TRAJECTORIES = traj;
            res = 1;
        end        
    end
end