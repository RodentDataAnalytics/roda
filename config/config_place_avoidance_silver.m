classdef config_place_avoidance_silver < config_place_avoidance
    % config_mwm Global constants
    properties(Constant)        
        COMMON_SETTINGS = { ...
            'Sessions', 6, ...  
            'TrialsPerSession', ones(1, 6), ...
            'TrialType', [ config_place_avoidance.TRIAL_TYPE_APAT_TRAINING ...
                           config_place_avoidance.TRIAL_TYPE_APAT_TRAINING, ...
                           config_place_avoidance.TRIAL_TYPE_APAT_TRAINING, ...
                           config_place_avoidance.TRIAL_TYPE_APAT_TRAINING, ...
                           config_place_avoidance.TRIAL_TYPE_APAT_TRAINING, ...
                           config_place_avoidance.TRIAL_TYPE_APAT_TEST ], ...
            'GroupsDescription', {'Control', 'Silver'} ...                                                          
        };
        COMMON_PROPERTIES = {'SHOCK_AREA_ANGLE', pi/180*225*ones(1, 6) };
        
        CONFIGURATIONS = { ...
            { 'Full trajectories', {}, {}}, ...
            {'Segments between shocks', { ...
                'SegmentationFunction', config_place_avoidance.SEGMENTATION_PLACE_AVOIDANCE }, ...
                { 'SEGMENT_SECTION', config_place_avoidance.SECTION_AVOID, ... 
                  'SEGMENT_MINIMUM_SHOCKS_DELAY', 6 ...
                } ...
            } ...
        };                       
    end   
        
    methods        
        function inst = config_place_avoidance_silver(desc, num_config) 
             param = config_place_avoidance_silver.CONFIGURATIONS{num_config};
             other_settings = param{2};
             prop = param{3};
             common = config_place_avoidance_silver.COMMON_SETTINGS;
             common_prop = config_place_avoidance_silver.COMMON_PROPERTIES;
             
             inst@config_place_avoidance(desc, ...
                 common{:}, other_settings{:}, ...
                 'Properties', [common_prop, prop] ...
             );              
        end
        
        % Imports trajectories from Noldus data file's
        function res = load_data(inst, root, varargin)            
            % "Silver" set
            % folder = '/home/tiago/place_avoidance/data3/';
            % control
            traj = inst.load_trajectories(root, 1, ...
                'FilterPattern', 'ho*Room*.dat', 'IdDayMask', 'hod%dr%d', 'ReverseDayId', 1, varargin{:}); 
            
            % silver
            traj = traj.append(inst.load_trajectories(root, 2, ...
                'FilterPattern', 'nd*Room*.dat', 'IdDayMask', 'nd%dr%d', 'ReverseDayId', 1, varargin{:}));           
            
            inst.TRAJECTORIES = traj;
            res = 1;
        end        
    end
end